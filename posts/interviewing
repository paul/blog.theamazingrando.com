<h1>Interviewing</h1>

<p>I&#39;ve been on one side or the other of the interview process for essentially my whole career. If I&#39;m not interviewing somewhere, I&#39;m interviewing other people to come work with me. Its a difficult process, and expensive. Its a tricky problem: given only few hours, how do you determine if someone is capable of doing the job? Getting it wrong is expensive, too. You waste everyone&#39;s time, and you pay the salary of someone for the several months it takes to figure out you need to fire them.</p>

<h2>The Problems with Popular Interviewing Styles</h2>

<p>Given only a few hours together, how do you determine if a candidate would be a good fit for your team? There&#39;s a variety of popular methods, all of which are flawed for one reason or another: </p>

<ul>
<li><strong>Technical challenges</strong> (&quot;How many piano tuners are there in New York?&quot;) — You&#39;re trying to see how a candidate solves a problem, but you&#39;re putting them on the spot in an already stressful situation. This also has absolutely nothing to do with their day job. Plus, at scale, this is easily gamed by studying when your questions leak.</li>
<li><strong>Whiteboard problems</strong> — Personally, I&#39;m heavily reliant on my tools whenever I&#39;m programming: autocomplete in my editor, stdlib docs, googling, etc... The best programmers are tweaking their development environment to improve their workflow, and you&#39;re stripping all that away. And again, you&#39;re forcing the candidate to work on an unfamiliar problem in an unfamiliar way, with an audience.</li>
<li><strong>Take-home test</strong> — Chances are, the candidate you&#39;re interviewing already has a job, and mid- and senior-level candidates likely have hobbies and families and other obligations outside work. Even if you tell them to spend no more than 2 hours or whatever on it, there&#39;s no way to control that, and it feels like you&#39;re not being respectful of their time. Also, there&#39;s a chance they give it to someone else, and you&#39;re not evaluating the candidate at all.</li>
<li><strong>Pairing on an actual bug</strong> — This is a great way to see how they solve a problem, and navigate your codebase, but has other problems. You can&#39;t just give the candidate access to your repository, so you have to give them a loaner laptop or something like codespaces, which means they might struggle because the tools and environments are not familiar to them. Additionally, not every candidate is given the same bug, so its hard to make relative comparisons.</li>
</ul>

<p>Having been on both sides of it, and the multitude of ways in which it failed to evaluate candidates, I starting thinking about how to make it better.</p>

<h2>What&#39;s the Point of Interviewing?</h2>

<p>I did one of my favorite things when it seems like all the &quot;best-practices&quot; ways are flawed: Ignore it all and rethink the problem from first-principles. So, when interviewing a candidate, what are we trying to figure out?</p>

<ol>
<li>Are they capable of doing programming?</li>
<li>Can they communicate their ideas and though-process? Can they give and receive feedback in their preferred medium (talking or writing)?</li>
<li>When presented with a challenge, how do they react? Do they do research or ask for help? Do they struggle and spin their wheels? Do they get frustrated?</li>
<li>Are they a culture fit for the rest of the team?[^1] </li>
</ol>

<p>So clearly, the best way to determine if someone can work on your code with your team is to have them work on your code with your team. There&#39;s lots of obvious reasons why this won&#39;t work, since you&#39;d have to onboard every candidate and pay them for their time, and that won&#39;t scale. What&#39;s the next best thing?</p>

<h2>Interview process</h2>

<p>After going through applications and resumes, we pick out the candidates we like, that meet a fairly low bar, and give them a quick phone screen, no more than 30 minutes. The purpose of this is to simply determine that the candidate isn&#39;t a moron, can answer a few basic questions coherently, and their experience matches their resume. For this part, I ask the standard questions like &quot;Tell me about your background&quot; and &quot;What&#39;s your ideal workday?&quot;. There&#39;s also a couple innocuous questions sprinkled in there, but they&#39;re really the only ones I care about the answers. They are:</p>

<ul>
<li>Tell me about your development environment. What customization have you made to improve your workflow? What tool could you not live without, and what tool do you wish you knew better?</li>
<li>How do you keep up with the latest technologies? Can you give me a summary of a technical blog post/article/book you read recently that you found interesting?</li>
</ul>

<p>The purpose of these questions is to determine how the candidate approaches their job. Do they spend time thinking about how to improve themselves and their craft? I&#39;m not expecting everyone to spend extra hours after work coding, but I&#39;m looking for people that take the time after finishing a story to investigate if there&#39;s a plugin for their IDE/editor that would reduce some friction they experienced. Or they take the time to read about a technology they don&#39;t use directly in their job, but might improve their approach if they&#39;re presented with a similar problem in the future.</p>

<p>If the candidate demonstrates this sort of interest in their craft, they&#39;re moved forward to the main part of the process.</p>

<h3>Pairing session</h3>

<p>Like I mentioned before, the best way to determine if someone can work with your team on code, is to have them actually do that. We built a stripped down Rails app that mimics our primary application: Models, database migrations, an empty controller, but not much else. We also periodically verify the dependencies are up-to-date, and it runs on the latest versions of Ruby.</p>

<p>[^1]: <em>Note</em>: This can sometimes be misconstrued in writing to mean &quot;Are they a white guy like me?&quot;. I want to be clear on this point, our team is fairly diverse for a tech startup, with a large percentage of women and non-binary team members. By &quot;culture fit&quot;, I&#39;m trying to determine if the candidate is tolerant of working on that kind of team. It&#39;s rare, but we&#39;ve dodged a bullet more than once by figuring that out early.</p>
